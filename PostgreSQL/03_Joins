# AS create alias for a column. Get executed at very end of a query. Cannot use inside WHERE.
	- SELECT column AS new_name FROM table
	- SELECT SUM(column) AS new_name FROM table

SELECT COUNT(amount) AS num_transactions FROM payment

SELECT customer_id, SUM(amount) AS total_spent FROM payment
GROUP BY customer_id
HAVING total_spent >100 --- ERROR. total_spent doesn't exist.

SELECT customer_id, SUM(amount) AS total_spent FROM payment
GROUP BY customer_id
HAVING SUM(amount) >100

SELECT customer_id, amount FROM payment
WHERE amount > 2

SELECT customer_id, amount AS new_name FROM payment
WHERE amount > 2

# INNER JOIN --- symmetrical: table order can be changed. Intersection A and B.
# JOIN = INNER JOIN
	  SELECT * FROM TableA
	  INNER JOIN TableB
	  ON TableA.col_match = TableB.col_match
	
SELECT payment_id, payment.customer_id, first_name FROM payment
INNER JOIN customer
ON payment.customer_id = customer.customer_id

SELECT payment_id, payment.customer_id, first_name FROM customer
INNER JOIN payment
ON payment.customer_id = customer.customer_id
	
# FULL OUTER JOIN --- grabs everything: Union A  and B. Clarifying WHERE. Fill null variable.
	- SELECT * FROM Registrations
	  FULL OUTER JOIN Logins
	  ON Registrations.name = Logins.name
	  WHERE Registrations.reg_id IS null OR Logins.log_id IS null --- opposite of INNER JOIN. Give the unique values of A and B. Union except intersection
	  
SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id

SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id
WHERE customer.customer_id IS null OR payment.payment_id IS null

SELECT COUNT(DISTINCT customer_id) FROM payment
SELECT COUNT(DISTINCT customer_id) FROM customer

# LEFT OUTER JOIN --- order matters.
	- SELECT * FROM TableA
	  LEFT OUTER JOIN TableB
	  ON TableA.col_match = TableB.col_match --- TableA + TableA intersect Table B
# SELECT * FROM TableA --- entries unique to Table A 
  LEFT OUTER JOIN TableB
  ON TableA.col_match = TableB.col_match
  WHERE TableB.id IS null --- TableA - TableA intersect Table B
	
SELECT film.film_id,title,inventory_id,store_id FROM film
LEFT JOIN inventory 
ON inventory.film_id = film.film_id
WHERE inventory.film_id IS null
	
# RIGHT OUTER JOIN --- table  order changed LEFT JOIN
	- SELECT * FROM TableA
	  RIGHT OUTER JOIN TableB
	  ON TableA.col_match = TableB.col_match --- TableB + TableA intersect Table B
# SELECT * FROM TableA --- entries unique to Table A 
  RIGHT OUTER JOIN TableB
  ON TableA.col_match = TableB.col_match
  WHERE TableA.id IS null --- TableB - TableA intersect Table B

# UNION --- to combine the result-set of two or more SELECT statements.
	- SELECT column_name FROM table 1
	  UNION
	  SELECT column_name FROM table 2










